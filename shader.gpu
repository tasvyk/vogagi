// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec2 texture;
varying vec3 vVertex; 
varying vec3 vVertexPos;
varying vec2 vTexture;
uniform mat4 ModelViewProjectionMatrix;

mat4 trMatrix(vec2 t) {
    mat4 dst;

    dst[0][0] = 1.0;
    dst[0][ 1] = 0.0;
    dst[0][ 2] = 0.0;
    dst[0][ 3] = 0.0;
    dst[1][ 0] = 0.0;
    dst[1][ 1] = 1.0;
    dst[1][ 2] = 0.0;
    dst[1][ 3] = 0.0;
    dst[2][ 0] = 0.0;
    dst[2][ 1] = 0.0;
    dst[2][ 2] = 1.0;
    dst[2][ 3] = 0.0;
    dst[3][ 0] = t.x;
    dst[3][ 1] = t.y;
    dst[3][ 2] = 0.0;
    dst[3][ 3] = 1.0;

    return dst;
}

mat4 scMatrix(float s){
    mat4 dst;

    dst[0][0] = s;
    dst[0][ 1] = 0.0;
    dst[0][ 2] = 0.0;
    dst[0][ 3] = 0.0;
    dst[1][ 0] = 0.0;
    dst[1][ 1] = s;
    dst[1][ 2] = 0.0;
    dst[1][ 3] = 0.0;
    dst[2][ 0] = 0.0;
    dst[2][ 1] = 0.0;
    dst[2][ 2] = s;
    dst[2][ 3] = 0.0;
    dst[3][ 0] = 0.0;
    dst[3][ 1] = 0.0;
    dst[3][ 2] = 0.0;
    dst[3][ 3] = 1.0;

    return dst;
}

uniform vec2 coords;
uniform float scale;

void main() {
    vec4 t1 = trMatrix(-coords)*vec4(texture,0.,1.);
    vec4 s1 = scMatrix(scale)*t1;
    vec4 t2 = trMatrix(coords)*s1;
    vTexture = t2.xy;
    vec4 position = ModelViewProjectionMatrix * vec4(vertex,1.0);
    vVertex = vertex;
    vVertexPos = vec3(position) / position.w;
    gl_Position = position;
}`;


// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

varying vec3 vVertex;
varying vec3 vVertexPos;
varying vec2 vTexture;
uniform mat4 normalMatrix; 
uniform vec3 lightPosition;
uniform sampler2D tmu;

vec3 calcLight(vec3 position) {
    vec3 lightColor = vec3(0.0, 0.0, 0.545);
    vec3 shapeColor = vec3(1.0, 1.0, 0.0);

    vec3 ambient = lightColor * 0.6;
    vec3 normal = normalize(vec3(normalMatrix * vec4(vVertex, 0.0))); // Using surface normal.
    vec3 lightDirection = normalize(lightPosition - position);
    float lambertian = max(dot(normal, lightDirection), 0.0);
    vec3 diffuse = shapeColor * lambertian;
    float specularStrength = 0.4;
    float spec = 0.0;
    
    if (lambertian > 0.0) {     //! To prevent bugs with excessive lighting.
        vec3 reflectDir = reflect(-lightDirection, normal);     // Reflected light vector.
        vec3 viewDir = normalize(-position);   
        float specAngle = max(dot(viewDir, reflectDir), 0.0);
        spec = pow(specAngle, 40.0);
    }
    vec3 specular = specularStrength * spec * lightColor;

    return ambient + diffuse + specular;
}
uniform bool light;
void main() {
    vec4 texCol = texture2D(tmu, vTexture);
    gl_FragColor = texCol;
    if(light){
        gl_FragColor =vec4(1.0,0.,1.,1.0);
    }
}`;